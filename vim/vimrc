" VIMRC
" author: Romeo Van Snick
" e-mail: romeovs@gmail.com

" disable compatible mode
set nocompatible

let $VIM_HOME = expand("$XDG_CONFIG_HOME/vim/vimfiles")

let g:python_host_prog = '/usr/local/bin/python'
let g:python2_host_prog = '/usr/local/bin/python'
" let g:python2_host_prog = '/usr/local/opt/python/libexec/bin/python'
let g:python3_host_prog = '/usr/local/bin/python3'

" set correct vimdir
set runtimepath+=$VIM_HOME

syntax match spaces /  / conceal cchar= "Don't forget the space after cchar!
set concealcursor=nvi
set conceallevel=1

" plugins <<
call plug#begin(expand('$VIM_HOME/bundle/'))

Plug 'shougo/vimproc.vim', { 'do': 'make' }

Plug 'tpope/vim-surround'         " mappings to work with ' ( etc
Plug 'tpope/vim-repeat'           " repeat more stuff
Plug 'vim-scripts/matchit.zip'    " better matching with %
Plug 'godlygeek/tabular'          " table alignment
Plug 'terryma/vim-expand-region'  " handy expansion of region
Plug 'ctrlpvim/ctrlp.vim'
Plug 'AndrewRadev/splitjoin.vim'

" Plug 'zxqfl/tabnine-vim'

" >>

" filetype plugins <<
" let g:ale_open_list = 1
"
" golang
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'godoctor/godoctor.vim', { 'for': 'go' }
let g:go_auto_type_info = 1
let g:go_auto_sameids = 0
let g:go_updatetime = 100
let g:go_fmt_command = "goimports"
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
let g:go_info_mode='gopls'

" fish
Plug 'dag/vim-fish'

" haskell
Plug 'eagletmt/ghcmod-vim', { 'for': 'haskell' }
Plug 'eagletmt/neco-ghc',   { 'for': 'haskell' }

" html
Plug 'othree/html5.vim'
Plug 'rstacruz/sparkup',    { 'for': [ 'html', 'javascript' ] }

" js
Plug 'https://github.com/mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'wokalski/autocomplete-flow'

let g:ale_completion_enabled = 1
let g:ale_fixers = {
\ 'javascript': ['eslint'],
\  'typescript': ['prettier'],
\  'typescriptreact': ['prettier'],
\ }
let g:ale_linters = {
\ 'javascript': ['flow', 'eslint'],
\ 'typescript': ['eslint', 'tsserver'],
\ 'typescriptreact': ['eslint', 'tsserver'],
\ 'python': ['flake8', 'pylint']
\ }
let g:ale_set_quickfix = 0
let g:ale_open_list = 0

let g:ale_keep_list_window_open = 0
let g:ale_sign_column_always = 1
let g:ale_sign_error = '!!'
let g:ale_sign_warning = '!!'
let g:ale_set_highlights = 0
let g:ale_fix_on_save = 1
let g:ale_javascript_flow_use_respect_pragma = 0

Plug 'w0rp/ale'

" Caddy
Plug 'isobit/vim-caddyfile'

" Plug 'mxw/vim-jsx', { 'for': 'javascript' }
" Plug 'chemzqm/vim-jsx-improve'
" Plug 'ruanyl/vim-fixmyjs', { 'for': 'javascript' }
let g:javascript_plugin_flow = 1
let g:javascript_plugin_jsdoc = 1
let g:jsx_ext_required = 0

" yaml
" Plug 'ingydotnet/yaml-vim'
Plug 'avakhov/vim-yaml'

" css
Plug 'JulesWang/css.vim', { 'for': [ 'css', 'stylus' ] }
Plug 'hhsnopek/vim-sugarss', { 'for': 'sugarss' }
Plug 'wavded/vim-stylus', { 'for': 'stylus' }
Plug 'othree/csscomplete.vim', { 'for': [ 'css', 'stylus' ] }

" python
" Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'zchee/deoplete-jedi'

Plug 'lifepillar/pgsql.vim'

let g:sql_type_default = 'pgsql'

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType stylus setlocal omnifunc=csscomplete#CompleteCSS

" handlebars
Plug 'mustache/vim-mustache-handlebars'

" applescript
Plug 'vim-scripts/applescript.vim', { 'for': 'applescript' }

" markdown
Plug 'tpope/vim-markdown', { 'for': 'markdown' }
let g:vim_markdown_frontmatter=1
let g:vim_markdown_folding_disabled=1

" nginx
Plug 'evanmiller/nginx-vim-syntax', { 'for': 'nginx' }

" typescript
Plug 'leafgarland/typescript-vim'
Plug 'HerringtonDarkholme/yats.vim'
" Plug 'peitalin/vim-jsx-typescript'

" Ziglang
Plug 'ziglang/zig.vim', { 'for': 'zig' }

" Rust
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
let g:rustfmt_autosave = 1

" Reason
Plug 'reasonml-editor/vim-reason-plus'
Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' }
Plug 'junegunn/fzf.vim'

" >>

" fix timeouts <<
set timeout
set timeoutlen=750
set timeoutlen=500
" >>

" colors <<
syntax on                  " enable syntax highlighting
filetype plugin indent on  " enable filetyp and indentation
colorscheme custom         " color schme
set cursorline             " highlight cursor line
set number                 " enable linenumbers
" >>

" indentation <<
set softtabstop=0 " don't use soft tabstops
set tabstop=2     " width of tab character
set shiftwidth=2  " > > moves 4 spaces
set shiftround    " > and < round to shiftwidth
set noexpandtab     " expand tabs to spaces
set smarttab      " backspace over expand tabs
set noautoindent  " don't autoindent
set smartindent   " do use smartindent
set nocindent     " no strict indentation
" >>

" listchars <<
" set listchars to only show tabs and trailing whitespace
" set listchars=tab:│\ ,trail:·
set listchars=tab:\ \ ,trail:·
set list
" >>

" wrapping <<
" set textwidth=80        " wrap to 80
set formatoptions-=t    " don't wrap automatically
set nowrap              " no line wrapping
" >>

" search <<
set incsearch   " search is incremental
set wrapscan    " wrap search
set nohlsearch  " don't highlight matches in search
set ignorecase  " ignore case in search
" >>

" drawing and shell <<
set vb t_vb=            " disable visual bells
set mouse=n             " enable mouse in normal mode
set guicursor=
set shell=/bin/bash
" >>

" conceal and fill <<
set conceallevel=2      " don't conceal chars
set fillchars=fold:\ ,stl:\ ,stlnc:\ ,vert:\|
" >>

" file handling <<
set encoding=utf-8  " set file encoding
set autoread        " auto read the file if it was modified
" set autochdir       " automatically change to dir of file
set suffixes=.log,.aux,.out,,.pdf,.o,.hi
" >>

" text handling <<
set backspace=eol,start,indent " allow to backspace over these characters
set nrformats+=alpha           " also add/subtract alphabet
set cpo+=J                     " two space after sentence
" >>

" windows <<
set scrolloff=8         " set 8 lines of padding top/bottom while scrolling
set equalalways         " make splits equal
" >>

" swap <<
set undodir=$XDG_CACHE_HOME/nvim/undo
set undofile

set noswapfile
set directory=$XDG_CACHE_HOME/nvim/swap

set backup
set nowritebackup
set backupdir=$XDG_CACHE_HOME/nvim/backup

let g:netrw_home=expand('$XDG_CACHE_HOME/nvim')
set viminfo='100,n$XDG_CACHE_HOME/nvim/viminfo  " viminfo location
" >>

" folding <<
" sets the fold text
function! FoldText()
  let nl   = v:foldend + v:foldstart + 1
  let text = substitute(getline(v:foldstart), "^ *", "", "")
  let text = substitute(text, "{{{", "", 1) " }}}
  let text = substitute(text, split(&cms, "%s")[0], "", "")
  let text = substitute(text, split(&cms, "%s")[1], "", "")
  let text = substitute(text, "^ ", "", "")
  let lvl  = substitute(v:folddashes, "-", "·", "g")
  let fill = repeat(' ', (winwidth(0) - strlen(lvl . " " .  text . "(". nl ." lines)")-9))
  let foldtext = " " . text . " " .lvl . fill . "(" . nl . " lines)"
  return foldtext
endfunction
set foldcolumn=2
set foldtext=FoldText()
" >>

" map keys <<
let mapleader = "\<space>"

imap § <esc>
vmap § <esc>
cmap § <esc>

" escape with jkl
imap jkl <esc>

" toggle folds with space
nnoremap <Leader><Leader> za
" nnoremap <space> <nop>

" better save
nnoremap <Leader>w :w<cr>
nnoremap - :w<cr>

" better quit
nnoremap Q  :q<cr>
nnoremap q: :q<cr>

" region expansion
vmap K <Plug>(expand_region_expand)
vmap J <Plug>(expand_region_shrink)
" nnoremap J <NOP>
nnoremap K v

" tabs
nmap t :tabnew<space>
nmap <silent> <tab>   :tabnext<cr>
nmap <silent> <S-tab> :tabprev<cr>

nmap <silent> <M-tab> :wincmd w<cr>

" commandline begin and end
cno <C-a> <Home>
cno <C-e> <End>

inoremap <C-a> <NOP>
inoremap <C-e> <NOP>

" paste / copy from system
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

nnoremap <cr> G
nnoremap <bs> gg

" bubble lines
Plug 'tpope/vim-unimpaired'

nmap <silent> <up> [e
nmap <silent> <down> ]e
vmap <silent> <up>   [egv
vmap <silent> <down> ]egv

" quick indent with arrow keys
nnoremap <left>  <<
nnoremap <right> >>

vnoremap <left>  <gv
vnoremap <right> >gv

vnoremap < <gv
vnoremap > >gv

" terminal mappings
tnoremap <esc> <C-\><C-n>
tnoremap <C-w> <C-\><C-n>

" >>

" comments <<
Plug 'tomtom/tcomment_vim'

" add comment types
au FileType php   set commentstring=<!--\ %s\ -->
au FileType agda  set commentstring=--\ %s
au FileType idris set commentstring=--\ %s
au FileType jsx   set commentstring=//\ %s

" map keys
nmap       <silent> '  :TComment<CR>
vmap       <silent> '  :TComment<CR>

" >>

" statusline and commandline <<
Plug 'bling/vim-airline'

set showcmd       " show command being typed
set shortmess=a   " truncate messages
set cmdheight=2   " set the command line height to 2 lines
set noshowmode    " don't show mode
set laststatus=2

autocmd Filetype qf setlocal laststatus=0
autocmd Filetype qf resize 4
" autocmd Filetype javascript,go copen 4

let g:airline_theme='custom'

let g:airline_symbols   = {}
let g:airline_left_sep  = ''
let g:airline_right_sep = ''
let g:airline_section_warning = ' '
let g:airline_powerline_fonts = 1
let g:airline_section_b = '%f%m'
function! AirlineInit()
  let g:airline_section_c = airline#section#create(['filetype'])
endfunction
autocmd User AirlineAfterInit call AirlineInit()
let g:airline_section_x = 'u%04b 0x%04B'
" >>

" show syntax stack <<
function! SynStack()
    if !exists('*synstack')
        return
    endif
    echo map(synstack(line('.'), col('.')), "synIDattr(v:val, 'name')")
endfunc
" " >>

" editor config <<
" Plug 'vim-scripts/PreserveNoEOL'      " for editorconfig
Plug 'editorconfig/editorconfig-vim'  " editorconfig
let g:EditorConfig_verbose = 0
let g:EditorConfig_exec_path = '/usr/local/bin/editorconfig'

" " >>

" templates <<
" Plug 'aperezdc/vim-template' " templates
" let g:templates_name_prefix = 'default'
" let g:templates_global_name_prefix = 'default'
" let g:templates_directory = "$VIM_HOME/templates"
"
" let g:templates_user_variables = [
"   \ ['REACT_COMPONENT', 'GetReactComponent']
"   \ ]
"
" function! GetReactComponent()
"   let l:file = expand('%:r:t')
"   if l:file == 'index'
"     let l:dir = expand('%:p:h:t')
"     let l:name = l:dir
"   else
"     let l:name = l:file
"   endif
"   let l:ret = substitute(l:name, '^\(.\)', '\u\1', 'g')
"   let l:ret = substitute(l:ret,  '[-_ ]\(.\)', '\u\1','g')
"   return l:ret
" endfunction
"
" " >>

" spell <<
" let g:myLang = 0
" let g:myLangList = [ "nospell", "nl", "en_us" ]
" function! MySpellLang()
"   "loop through languages
"   let g:myLang = g:myLang + 1
"   if g:myLang >= len(g:myLangList) | let g:myLang = 0 | endif
"
"   let l:lang   = g:myLangList[g:myLang]
"   let l:simple = split(l:lang, '_')[0]
"
"   if l:lang == "nospell"
"     set nospell
"     echo "spell off"
"   else
"     exec "setlocal spell spelllang=" . l:lang
"     exec "setlocal spellfile=" . expand("$VIM_HOME/spell/") . l:simple . "." . &encoding . ".add"
"     echo "spell language" l:lang
"   endif
"
" endf
"
" map <F7> :call MySpellLang()<CR>
" imap <F7> <C-o>:call MySpellLang()<CR
" " >>

" slime <<
" " Plug 'jpalardy/vim-slime'
" " let g:slime_target = "tmux"
" " let g:slime_default_config = {"socket_name": "default", "target_pane": "1"}
" " >>

" text obj <<
" Plug 'reedes/vim-textobj-quote'
" Plug 'kana/vim-textobj-user'
" Plug 'kana/vim-textobj-line'
" Plug 'kana/vim-textobj-entire'
"
" let g:expand_region_text_objects = {
" \ 'iw'  :0,
" \ 'iW'  :0,
" \ 'i"'  :0,
" \ 'i''' :0,
" \ 'i)'  :1,
" \ 'i]'  :1,
" \ 'i}'  :1,
" \ 'is'  :1,
" \ 'ip'  :0,
" \ 'ie'  :0,
" \ }
"
"
" " quotes
" function! Quotes ()
"   call textobj#quote#init()
" endfunction
"
" let g:textobj#quote#matchit = 1
" " >>

" easy motion <<
" Plug 'easymotion/vim-easymotion'
" let g:EasyMotion_do_mapping = 0
"
" nmap s <Plug>(easymotion-overwin-w)
" " >>

" completion <<
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-go', { 'do': 'make'}
Plug 'Shougo/echodoc'

set completeopt+=noinsert
" set completeopt+=noselect
set completeopt-=preview
set shortmess+=c

let g:python3_host_skip_check = 1

let g:deoplete#enable_at_startup = 1
let g:deoplete#sources = {}
let g:deoplete#sources._ = []

let g:deoplete#sources#go#pointer = 1
let g:deoplete#sources#go#use_cache = 1

let g:deoplete#omni_patters = {}
let g:deoplete#omni#input_patterns = {}

let g:deoplete#ignore_sources = {}
let g:deoplete#ignore_sources._ = ['member', 'omni', 'dictionary' ]

" >>

" indent lines <<
" Plug 'Yggdroot/indentLine' " indent lines
"
" let g:indentLine_setColors = 0
" let g:indentLine_char = '│'
" >>

command! -bang Q %bd!|e#

""" Git <<
Plug 'airblade/vim-gitgutter'     " git gutter
Plug 'tpope/vim-fugitive'

set updatetime=100
if exists('&signcolumn')  " Vim 7.4.2201
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif

let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '~'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_modified_removed = '~-'
let g:gitgutter_sign_removed_first_line = '‾'
"""

call plug#end()

let g:LanguageClient_serverCommands = { 'reason': ['/Users/romeo/.config/vim/exe/reason-language-server.exe']}
let g:deoplete#enable_at_startup = 1

function! TabStopHook(config)
  if has_key(a:config, 'indent_style') && a:config['indent_style'] == 'tab'
    set tabstop=2
    set shiftwidth=2
    set smartindent
    set noexpandtab
  endif

  return 0
endfunction

call editorconfig#AddNewHook(function('TabStopHook'))

" vim: fdm=marker foldmarker=<<,>>
