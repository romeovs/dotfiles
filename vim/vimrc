" VIMRC
" author: Romeo Van Snick
" e-mail: romeovs@gmail.com

" disable compatible mode
set nocompatible

let $VIM_HOME = expand("$XDG_CONFIG_HOME/vim/vimfiles")

let g:python2_host_prog = '/usr/bin/python'
let g:python3_host_prog = '/usr/local/bin/python3'

" set correct vimdir
set runtimepath+=$VIM_HOME

" PLUGINS <<
call plug#begin(expand('$VIM_HOME/bundle/'))
" >>

" PLUGINS <<
Plug 'tpope/vim-surround'    " mappings to work with ' ( etc
Plug 'tpope/vim-repeat'      " repeat more stuff
Plug 'edsono/vim-matchit'    " better matching with %
Plug 'godlygeek/tabular'     " table alignment
Plug 'terryma/vim-expand-region'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-entire'
Plug 'reedes/vim-textobj-quote'

" snippets
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'reedes/vim-wordy'
" NeoBundle 'honza/vim-snippets'

" >>

" FILETYPE PLUGINS <<
Plug 'eagletmt/ghcmod-vim'

Plug 'rstacruz/sparkup'

Plug 'vim-scripts/scribble.vim'          " scribble
Plug 'niklasl/vim-rdf'                   " RDF, turtle, ...
Plug 'eagletmt/neco-ghc'                 " Haskell complete
Plug 'vim-scripts/applescript.vim'       " applescript
Plug 'othree/html5.vim'                  " html5
" Plug 'mustache/vim-mustache-handlebars'  " mustache / handlebars
Plug 'romeovs/vim-stylus'                 " stylus
Plug 'evanmiller/nginx-vim-syntax'       " nginx
Plug 'tpope/vim-markdown'                " markdown
Plug 'godlygeek/tabular'
" Plug 'plasticboy/vim-markdown'
Plug 'vim-scripts/octave.vim'            " octave
Plug 'killphi/vim-ebnf'                  " ebnf
Plug 'guns/vim-clojure-static'           " clojure
Plug 'tpope/vim-rails'                   " Ruby Rails
Plug 'kchmck/vim-coffee-script'          " coffeescript
Plug 'idris-hackers/idris-vim'           " idris
Plug 'derekelkins/agda-vim'              " agda
Plug 'statianzo/vim-jade'                " jade
Plug 'wlangstroth/vim-racket'            " racket
Plug 'nickng/vim-scribble'               " scribble
Plug 'alunny/pegjs-vim'                  " pegjs
Plug 'jsx/jsx'                           " jsx
" Plug 'romeovs/vim-javascript'            " jsx
" Plug 'jelera/vim-javascript-syntax'
Plug 'pangloss/vim-javascript'
Plug 'gkz/vim-ls'                        " livescript
Plug 'elmcast/elm-vim'               " elm
" >>

" FIX TIMEOUTS <<
set timeout
set timeoutlen=750
set timeoutlen=500
" >>

" COLORS <<
syntax on                  " enable syntax highlighting
filetype plugin indent on  " enable filetyp and indentation
colorscheme custom         " color schme
set cursorline             " highlight cursor line
set number                 " enable linenumbers
" >>

" INDENTATION <<
set softtabstop=0 " don't use soft tabstops
set tabstop=2     " width of tab character
set shiftwidth=2  " > > moves 4 spaces
set shiftround    " > and < round to shiftwidth
set expandtab     " expand tabs to spaces
set smarttab      " backspace over expand tabs
set noautoindent  " don't autoindent
set smartindent   " do use smartindent
set nocindent     " no strict indentation
" >>

" listchars <<
" set listchars to only show tabs and trailing whitespace
exec "set listchars=trail:\uB7,nbsp:_,tab:\uBB\uBB"
set list
" >>

" wrapping <<
set textwidth=80        " wrap to 80
set formatoptions-=t    " don't wrap automatically
set nowrap              " no line wrapping
" >>

" search <<
set incsearch   " search is incremental
set wrapscan    " wrap search
set nohlsearch  " don't highlight matches in search
set ignorecase  " ignore case in search
" >>

" drawing and shell <<
set vb t_vb=            " disable visual bells
set mouse=n             " enable mouse in normal mode
" >>

" conceal and fill <<
set conceallevel=0      " don't conceal chars
set fillchars=fold:\ ,stl:\ ,stlnc:\ ,vert:\|
" >>

" file handling <<
set encoding=utf-8  " set file encoding
set autoread        " auto read the file if it was modified
set autochdir       " automatically change to dir of file
set suffixes=.log,.aux,.out,,.pdf,.o,.hi
" >>

" text handling <<
set backspace=eol,start,indent " allow to backspace over these characters
set nrformats+=alpha           " also add/subtract alphabet
set cpo+=J                     " two space after sentence
" >>

" windows <<
set scrolloff=8         " set 8 lines of padding top/bottom while scrolling
set equalalways         " make splits equal
" >>

" SWAP <<
set undodir=$XDG_CACHE_HOME/nvim/undo
set undofile

set noswapfile
set directory=$XDG_CACHE_HOME/nvim/swap

set backup
set nowritebackup
set backupdir=$XDG_CACHE_HOME/nvim/backup

let g:netrw_home=expand('$XDG_CACHE_HOME/nvim')
set viminfo='100,n$XDG_CACHE_HOME/nvim/viminfo  " viminfo location
" >>

" FOLDING <<
" sets the fold text
function! FoldText()
  let nl   = v:foldend + v:foldstart + 1
  let text = substitute(getline(v:foldstart), "^ *", "", "")
  let text = substitute(text, "{{{", "", 1) " }}}
  let text = substitute(text, split(&cms, "%s")[0], "", "")
  let text = substitute(text, split(&cms, "%s")[1], "", "")
  let text = substitute(text, "^ ", "", "")
  let lvl  = substitute(v:folddashes, "-", "Â·", "g")
  let fill = repeat(' ', (winwidth(0) - strlen(lvl . " " .  text . "(". nl ." lines)")-9))
  let foldtext = " " . text . " " .lvl . fill . "(" . nl . " lines)"
  return foldtext
endfunction
set foldcolumn=2
set foldtext=FoldText()
" >>

" MAP KEYS <<
let mapleader = "\<space>"
" escape with jkl
imap jkl <esc>

" toggle folds with space
nnoremap <Leader><Leader> za
" nnoremap <space> <nop>

" better save
nnoremap <Leader>w :w<cr>
nnoremap - :w<cr>

" better quit
nnoremap Q  :q<cr>
nnoremap q: :q<cr>

" region expansion
vmap K <Plug>(expand_region_expand)
vmap J <Plug>(expand_region_shrink)
nnoremap J <NOP>
nnoremap K v

" tabs
nmap t :tabnew<space>
nmap <silent> <tab>   :tabnext<cr>
nmap <silent> <S-tab> :tabprev<cr>

nmap <silent> <M-tab> :wincmd w<cr>


" commandline begin and end
cno <C-a> <Home>
cno <C-e> <End>

inoremap <C-a> <NOP>
inoremap <C-e> <NOP>

" paste / copy from system
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

nnoremap <cr> G
nnoremap <bs> gg

" bubble lines
Plug 'tpope/vim-unimpaired'  " bracket mappings
nmap <silent> <up> [e
nmap <silent> <down> ]e

vmap <silent> <up>   [egv
vmap <silent> <down> ]egv

" quick indent with arrow keys
nnoremap <left>  <<
nnoremap <right> >>

vnoremap <left>  <gv
vnoremap <right> >gv

vnoremap < <gv
vnoremap > >gv

" terminal mappings
tnoremap <esc> <C-\><C-n>
tnoremap <C-w> <C-\><C-n>

" >>

" COMMENTS <<
Plug 'tomtom/tcomment_vim'


" add comment types
au FileType php   set commentstring=<!--\ %s\ -->
au FileType agda  set commentstring=--\ %s
au FileType idris set commentstring=--\ %s
au FileType jsx   set commentstring=//\ %s

" map keys
nmap       <silent> '  :TComment<CR>
vmap       <silent> '  :TComment<CR>

" >>

" STATUSLINE AND COMMANDLINE <<
Plug 'bling/vim-airline'

set showcmd       " show command being typed
set shortmess=a   " truncate messages
set cmdheight=2   " set the command line height to 2 lines
set noshowmode    " don't show mode
set laststatus=2

let g:airline_theme='custom'

let g:airline_symbols   = {}
let g:airline_left_sep  = ''
let g:airline_right_sep = ''
let g:airline_section_warning = ' '
let g:airline_powerline_fonts = 1
let g:airline_section_b = '%f%m'
function! AirlineInit()
  let g:airline_section_c = airline#section#create(['filetype'])
endfunction
autocmd User AirlineAfterInit call AirlineInit()
let g:airline_section_x = 'u%04b 0x%04B'
" >>

" show syntax stack <<
function! SynStack()
    if !exists('*synstack')
        return
    endif
    echo map(synstack(line('.'), col('.')), "synIDattr(v:val, 'name')")
endfunc
" >>

" editor config <<
Plug 'vim-scripts/PreserveNoEOL'      " for editorconfig
Plug 'editorconfig/editorconfig-vim'  " editorconfig
let g:EditorConfig_verbose = 0
let g:EditorConfig_exec_path = '/usr/local/bin/editorconfig'
" >>

" TEMPLATES <<
Plug 'aperezdc/vim-template' " templates
let g:templates_name_prefix = 'default'
let g:templates_global_name_prefix = 'default'
let g:templates_directory = "$VIM_HOME/templates"

let g:templates_user_variables = [
  \ ['REACT_COMPONENT', 'GetReactComponent']
  \ ]

function! GetReactComponent()
  let l:file = expand('%:r:t')
  if l:file == 'index'
    let l:dir = expand('%:p:h:t')
    let l:name = l:dir
  else
    let l:name = l:file
  endif
  let l:ret = substitute(l:name, '^\(.\)', '\u\1', 'g')
  let l:ret = substitute(l:ret,  '[-_ ]\(.\)', '\u\1','g')
  return l:ret
endfunction

" >>

" spell <<
let g:myLang = 0
let g:myLangList = [ "nospell", "nl", "en_us" ]
function! MySpellLang()
  "loop through languages
  let g:myLang = g:myLang + 1
  if g:myLang >= len(g:myLangList) | let g:myLang = 0 | endif

  let l:lang   = g:myLangList[g:myLang]
  let l:simple = split(l:lang, '_')[0]

  if l:lang == "nospell"
    set nospell
    echo "spell off"
  else
    exec "setlocal spell spelllang=" . l:lang
    exec "setlocal spellfile=" . expand("$VIM_HOME/spell/") . l:simple . "." . &encoding . ".add"
    echo "spell language" l:lang
  endif

endf

map <F7> :call MySpellLang()<CR>
imap <F7> <C-o>:call MySpellLang()<CR
" >>

" MARKDOWN <<
let g:vim_markdown_frontmatter=1
let g:vim_markdown_folding_disabled=1
" >>

" REGION
let g:expand_region_text_objects = {
\ 'iw'  :0,
\ 'iW'  :0,
\ 'i"'  :0,
\ 'i''' :0,
\ 'i)'  :1,
\ 'i]'  :1,
\ 'i}'  :1,
\ 'is'  :0,
\ 'ip'  :0,
\ 'ie'  :0,
\ }

" load mustache
au BufNewFile,BufRead,BufNew *.hbs setl ft=mustache

call plug#end()



" quotes
function! Quotes ()
  call textobj#quote#init()
endfunction

let g:textobj#quote#matchit = 1


" vim: fdm=marker foldmarker=<<,>>
