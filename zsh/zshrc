# neeojjjjjs to be done here instead of zshenv to prevent /etc/profile from overwriting it
export PATH="${HOME}/.cabal/bin:/usr/local/opt/ruby/bin:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/bin:/usr/texbin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:$HOME/.bin:/usr/local/share/npm/bin:$PATH"

export FPATH="${HOME}/.config/zsh/functions:${FPATH}"
export LS_COLORS="di=00;31:ex=00;37:mi=00;41;30:tw=00;33"

preexec_functions=()

function preexec() {
  for fn in $preexec_functions; do
    $fn "$@"
  done
}

precmd_functions=()

function precmd() {
  for fn in $precmd_functions; do
    $fn "$@"
  done
}

chpwd_functions=
accept_line_functions=()

function accept_line {
  for fn in $accept_line_functions; do
    $fn "$@"
  done
  zle accept-line
}

zle -N accept_line
bindkey -M vicmd "^M" accept_line
bindkey "^M" accept_line


# KEYBINDS {{{
KEYTIMEOUT=1
autoload -U history-search-end
zle -N history-beginning-search-backward-end history-search-end

typeset -g -A key
bindkey -v                                      # vi keybinding
bindkey -M viins '^?' backward-delete-char      # but with normal backspace
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
bindkey '^B' vi-backward-blank-word
bindkey '^W' vi-forward-blank-word
bindkey '^K' kill-line
bindkey '^U' backward-kill-line
bindkey '^F' vi-find-next-char
bindkey '^G' vi-find-prev-char
bindkey '   ' complete-word # complete on tab, leave expansion to _expand
bindkey '^[[Z' reverse-menu-complete
bindkey '^R' vi-change-whole-line
bindkey '^[[A' history-beginning-search-backward-end
bindkey '^[[B' history-beginning-search-forward
bindkey '^f' vi-forward-word


stty erase  &>/dev/null
# }}}

# OPTIONS {{{
setopt LONG_LIST_JOBS       # list jobs in long format by default
setopt CORRECT              # try command correction
setopt MENUCOMPLETE         # insert first complete automatically
setopt NOTIFY               # print bg job status immediatly
setopt AUTO_RESUME          # one word commands resume the corresponding process
setopt NOCLOBBER            # do not overwrite files with >
setopt MAIL_WARNING         # check mail
setopt REC_EXACT            # in completion recognize exact matches even when ambigous
setopt AUTO_LIST            # list all possibiliies in ambigous completion
unsetopt BG_NICE            # lower priority of bg processes
unsetopt EXTENDED_GLOB      # treats # ~ and ^  as part of filename patterns

# history {{{
HISTFILE=$HOME/.cache/zsh/zhistory
HISTSIZE=100000
SAVEHIST=100000

setopt HIST_IGNORE_DUPS     # ignore duplicates on history expansion
setopt HIST_REDUCE_BLANKS   # reduce unnecessary blank spaces in history
setopt HIST_IGNORE_SPACE    # ignore commands if they start with a space
setopt HIST_IGNORE_DUPS     # ignore commands if they are the same as the previous one
setopt HIST_NO_STORE        # don't store 'history' and 'fc' commands
setopt APPEND_HISTORY       # just append instead of overwrite
setopt INC_APPEND_HISTORY   # append after execution in stead of after killing of shell
setopt EXTENDED_HISTORY     # puts timestamps in the history
setopt SHARE_HISTORY        # explicitly share history across running sessions
# }}}

# directories {{{
setopt AUTO_PUSHD           # automatically save where you were
setopt AUTO_CD              # when command is not found interpret as cd command
setopt PUSHD_IGNORE_DUPS    # ignore duplicates with pushd
setopt PUSHD_SILENT         # don't print directory stack when pushd or popd
setopt PUSHD_MINUS          # swap cd + - options
setopt PUSHD_TO_HOME        # 'pushd' equals 'pushd $HOME'
setopt AUTO_PARAM_SLASH     # add slash after directory complete
setopt GLOB_DOTS            # leading . in filenames are unnecessary
unsetopt CDABLE_VARS        # if location for cd command is not there try to put ~/ in front
# }}}
# }}}

# PROMPTS {{{
autoload -U $XDG_CONFIG_HOME/zsh/functions/*
setopt prompt_subst
local return_codes=
for sig in `kill -l`; do
  local n=`kill -l $sig`
  let local="code = ${n} + 128"
  return_codes+="%${code}(?,%F{yellow}${sig}%f,)"
done

local return_code_enabled="${return_codes}"' %(?, ,%F{red}%U%?%f%u)'
local return_code_disabled=
local return_code=$return_code_disabled
local curr_path='%F{black}[%F{red}%1c%F{black}]%f'
local sep='%F{black}$ %f'
local vim_mode='%F{yellow}${VIMODE}%f'
local last_time='%F{magenta}${ETIME}%f'
local curr_time='%F{black}%D{%L:%M:%S %p}'
local start='%F{blue}|%f'

PS1='${start}${curr_path}${sep}'
PS2='%F{black}%_> %f'
RPS2='%F{black} ... %f'
PS3='%F{blue} ?# %f'

RPS1="${vim_mode}"' ${return_code} '"${last_time} ${curr_time}"

TMOUT=1

TRAPALRM() {
  if [ "$WIDGET" != "expand-or-complete" ]; then
    zle reset-prompt
  fi
}

# set vim mode with keymap select
function zle-keymap-select {
  VIMODE="${${KEYMAP/vicmd/--cmd--}/(main|viins)/}"
  zle reset-prompt
}
zle -N zle-keymap-select


# Get the start time of the command
function preexec_get_start () {
  cmd_start_time=$((`date "+%s + %N / 1.0e9"`))
}

preexec_functions+='preexec_get_start'


# Output total execution
function precmd_set_end() {
  if (($+cmd_start_time)); then
    local stop=$((`date "+%s + %N / 1_000_000_000.0"`))
    let local "elapsed = ${stop} - ${cmd_start_time}"
    ETIME=`printf "%0.4fs" ${elapsed}`
    unset cmd_start_time
  fi
}

precmd_functions+='precmd_set_end'

# reset some stuff on accept_line
function accept_line_reset {
  VIMODE=''
  ETIME=''
  if [[ -z $BUFFER ]]; then
    return_code=$return_code_disabled
  else
    return_code=$return_code_enabled
  fi
  zle doprompt
}

accept_line_functions+='accept_line_reset'
# }}}

# UNFOUND COMMAND {{{
function command_not_found_handler(){
  print -P "%F{red}Error: Command '%F{yellow}$1%F{red}' not found."
}
# }}}

# COMPLETION {{{
autoload -U compinit && compinit
autoload -U compinstall

# zmodload -i zsh/complist
setopt hash_list_all            # hash everything before completion
setopt completealiases          # complete alisases
setopt always_to_end            # when completing from the middle of a word, move the cursor to the end of the word
setopt complete_in_word         # allow completion from within a word/phrase
setopt correct                  # spelling correction for commands
setopt list_ambiguous           # complete as much of a completion until it gets ambiguous.

# use caching
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path $HOME/.cache/zsh/cache/completion

zstyle ':completion:*' force-list on

# use colors
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt '%S%F{black}At %p: Hit TAB for more, or the character to insert%s%f'
zstyle ':completion:*' menu select=1 _complete _ignored _approximate
zstyle ':completion:*' select-prompt '%S%F{black}Scrolling active: current selection at %p%s%f'
zstyle ':completion:*' select-scroll 3

# kill completion
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

# allow one error for every three characters typed in approximate completer
zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX+$#SUFFIX)/2 )) numeric )'

# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions

# completion sections styling
zstyle ':completion:*:messages' format $'\e[00;31m%d'

zstyle ':completion:*' hosts $(awk '/^[^#]/ {print $2 $3" "$4" "$5}' /etc/hosts | grep -v ip6- && grep "^#%" /etc/hosts | awk -F% '{print $2}')

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:messages' format '%F{blue}'
zstyle ':completion:*:warnings' format '%F{red}No matches for: "%d"'
zstyle ':completion:*:corrections' format '%F{blue}%d%b'
zstyle ':completion:*:descriptions' format '%F{yellow}%d%b'
zstyle ':completion:*' group-name ''

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

## offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Filename suffixes to ignore during completion (except after rm command)
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.o' '*?.c~' '*?.old' '*?.pro' '*?.swp' '*?.swo'

# Ignore tex-in-betweeners for vim completion
zstyle ':completion:*:*:vim:*:*files' ignored-patterns '*?.aux' '*?.log' '*?.toc' '*?.bak' '*?.bib' '*?.auxlock' '*?.out' '*?.run.xml' '*?.pyg' '*?.bbl' '*?.blg' '*?.pdf' '*?.gnuplot' '*?.table' '*?.gz' '*?.fmt' '.DS_Store' '*?.fdb_latexmk' '*?.dvi' '*?.idx' '*?.ilg' '*?.ind' '*?.fls' '*?.dpth' '*?.pdf' '*?.EXE' '*?.OBJ' '*?.o' '*?.hi'
zstyle ':completion:*:*:mupdf:*:*files' ignored-patterns '*?.aux' '*?.log' '*?.toc' '*?.bak' '*?.bib' '*?.auxlock' '*?.out' '*?.run.xml' '*?.pyg' '*?.bbl' '*?.blg' '*?.tex' '*?.gnuplot' '*?.table' '*?.gz' '*?.fmt' '.DS_Store' '*?.fdb_latexmk' '*?.dvi' '*?.idx' '*?.ilg' '*?.ind' '*?.dpth'
zstyle ':completion:*:*:zathura:*:*files' ignored-patterns '*?.aux' '*?.log' '*?.toc' '*?.bak' '*?.bib' '*?.auxlock' '*?.out' '*?.run.xml' '*?.pyg' '*?.bbl' '*?.blg' '*?.tex' '*?.gnuplot' '*?.table' '*?.gz' '*?.fmt' '.DS_Store' '*?.fdb_latexmk' '*?.dvi' '*?.idx' '*?.ilg' '*?.ind' '*?.dpth'
# }}}

# vim: fdm=marker
